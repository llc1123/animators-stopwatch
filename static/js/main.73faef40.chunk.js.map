{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","time","offset","Date","setTime","fps","setFps","timer","setTimer","start","useCallback","t","setInterval","updateTime","reset","useEffect","onkeyup","ev","keyCode","window","addEventListener","clearInterval","removeEventListener","now","getMinute","Math","floor","toString","padStart","getSecond","className","type","value","onChange","event","target","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.73faef40.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [time, setTime] = useState({\n    time: 0,\n    offset: new Date()\n  })\n  const [fps, setFps] = useState(24)\n  const [timer, setTimer] = useState(null)\n\n  const start = useCallback(() => {\n    if (timer) {\n      setTimer(null)\n    } else {\n      setTime(t => ({\n        ...t,\n        offset: new Date()\n      }))\n      setTimer(setInterval(() => updateTime(), 0))\n    }\n  }, [timer])\n\n  const reset = useCallback(() => {\n    if (timer) {\n      setTimer(null)\n    }\n    setTime({time: 0, offset: new Date()})\n  }, [timer])\n\n  useEffect(() => {\n    const onkeyup = ev => {\n      switch (ev.keyCode) {\n        case 32:\n          start()\n          break\n        case 67:\n          reset()\n          break\n        default:\n          return\n      }\n    }\n\n    window.addEventListener('keyup', onkeyup)\n\n    return () => {\n      if (timer) {\n        clearInterval(timer)\n      }\n      window.removeEventListener('keyup', onkeyup)\n    }\n  }, [reset, start, timer])\n\n  const updateTime = () => {\n    const now = new Date()\n    setTime(t => ({\n      time: t.time + (now - t.offset),\n      offset: now\n    }))\n  }\n\n  const getMinute = () => {\n    return Math.floor(time.time / (1000*60)).toString().padStart(2, '0')\n  }\n\n  const getSecond = () => {\n    return (Math.floor(time.time / 1000) % 60).toString().padStart(2, '0')\n  }\n\n  const getMilli = () => {\n    return Math.floor(time.time % 1000 / 10).toString().padStart(2, '0')\n  }\n\n  const getFrame = () => {\n    return Math.floor(time.time % 1000 / (1000 / fps)).toString().padStart(2, '0')\n  }\n\n  const getFrames = () => {\n    return Math.floor(time.time / (1000 / fps)).toString().padStart(8, '0')\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\" >\n        <div className=\"upper\">\n          <div className=\"left\">\n            <code className=\"time\">\n              {getMinute()}:{getSecond()}.{getMilli()}\n            </code>\n            \n            <code className=\"frame\">\n              {getMinute()}:{getSecond()}+{getFrame()}\n            </code>\n\n            <code className=\"frames\">\n              {getFrames()}\n            </code>\n          </div>\n          <div className=\"right\">\n            <div className=\"text\">FPS:</div>\n            <input type=\"number\" className=\"fps\" value={fps} onChange={event => setFps(event.target.value)}/>\n          </div>\n\n\n        </div>\n        \n        <div className=\"divider\" />\n\n        <div className=\"buttons\">\n          <div className=\"button start\" onClick={() => start()}>{timer ? 'Stop (Space)' : 'Start (Space)'}</div>\n          <div className=\"button reset\" onClick={() => reset()}>Reset (C)</div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}